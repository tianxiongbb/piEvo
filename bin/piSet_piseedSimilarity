#! /usr/bin/env python
# -*- coding: utf-8 -*-
import subprocess
import sys
import re
import os
import argparse
import bb_basic as bb
import numpy as np


def main():
    print_help()
    n = len(sys.argv)-2 # sample number
    fo = bb.fun_open_file(sys.argv[1], "w")
    dict_seed = {} # store all the samples into dict_seed
    factors = {} # store factors for normalization
    print "reading samples......"
    for i in range(1,n+1):
        print "\treading sample %s"%(sys.argv[i+1])
        dict_seed[i], factors[i] = read_seed(bb.fun_open_file(sys.argv[i+1], "r"))
        if i == 1:
            positions = dict_seed[i].keys()
        else:
            positions = bb.intersection(positions, dict_seed[i].keys())
    print "comparing seeds in all samples......"
    dict_cosSim = compare_seed(dict_seed, positions, factors)
    print "writing results....."
    for pos in dict_cosSim:
        p = pos.split(";")
        fo.write("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n"%(p[0],p[1],p[2],dict_cosSim[pos][2],dict_cosSim[pos][0],p[3],dict_cosSim[pos][1],dict_cosSim[pos][3]))
    fo.close()


# --------functions--------
def cosSimN(m):
    return (np.linalg.svd(m, full_matrices=True)[1][0]**2-1)/(np.sum(m**2)-1)


def compare_seed(dict_seed, positions, factors):
    do = {}
    k = 0
    for pos in positions:
            k += 1
            if k%100000 == 0:
                print "\t%s posotion compared......"%k
            seeds = [] # union of all seeds in position pos
            for i in dict_seed:
                seeds = seeds + dict_seed[i][pos].keys()
            seeds = list(set(seeds))
            seed_matrix = np.zeros(shape=(len(seeds), len(dict_seed))) # init seed matrix
            for i in dict_seed: # fill seed matrix
                for j in range(len(seeds)):
                    try:
                        seed_matrix[j][i-1] += dict_seed[i][pos][seeds[j]]
                    except KeyError:
                        pass
            abun = np.sum(seed_matrix, axis=0) # store piRNA abundance 
            #print factors
            #print abun
            for i in range(len(abun)):
                abun[i] *= factors[i+1]
            do[pos] = [cosSimN(seed_matrix), np.sum(abun)/len(abun), bb.specificity(abun), ",".join(map(str, abun))]
    return do


def read_seed(f):
    do = {}
    tf = 0
    for l in f:
        li = l.strip().split()
        pos = ";".join(li[:3]+li[5:6])
        if pos not in do:
            do[pos] = {}
        try:
            do[pos][li[6]] += int(li[3])
        except KeyError:
            do[pos][li[6]] = int(li[3])
        tf += int(li[3])
    tf = 1000000/float(tf)
    return do, tf


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--version", action="version", version="%(prog)s 1.0")
    parser.add_argument("args", help="", nargs="*")
    args = parser.parse_args()
    return args


def print_help():
    if len(sys.argv) < 2:
        bb.fun_print_help("out.bed", "in1.seed", "in2.seed", "in3.seed", "...")

# --------process--------
if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        bb.fun_print_error("user interrupted, abort!")
        sys.exit(0)
