#!/bin/bash

# function
function checkTools(){
	if [ `which $1` ];then
		echo0 3 "$1: `which $1`"
	else
		echo0 0 "$1 not found, please install it or add it into your PATH!"
		exit 1
	fi
}

# help information
help_info(){
	echo0 5 "$0"
	echo0 5 "\t-l <file>\tleft reads of ChIPseq, You can input multiple sample like -l \"left1.fq left2.fq left3.fq \""
	echo0 5 "\t-r <file>\tright reads of ChIPseq. not set if it is single-end sequencing\n\t\t\t\ttips for multiple sample mode: if all data is single-end, use like -l \"left1.fq left2.fq\" without -r; if all data is paired-end data, use like -l \"left1.fq left2.fq\" -r \"right1.fq right2.fq\"; if some sample is single-end and other is paired-end, then use like -l \"left1.fq left2.fq left3.fq\" -r \"right1.fq none right3.fq\", which none indicates signle-end data."
	echo0 5 "\t-I \t\tset -I if you have input file for peak calling. Please make sure the input file is the last one in your left and right file list"
	echo0 5 "\t-g <genome>\tgenome used."
	echo0 0 "picluster and TE analysis:"
	echo0 0 "\t-P \t\tset -P to enable get normalized signal across piclusters. default: not set"
	echo0 0 "\t-T \t\tset -T to enable get normalized signal across TEs. default: not set"
	echo0 4 "mapping:"
	echo0 4 "\t-M <bowtie2|bwa_mem|bwa_aln>\tengine used for mapping. default: bowtie2"
	echo0 4 "\t-m \t\tbowtie2 mode used. default: --very-sensitive"
	echo0 4 "\t-X <int>\tmax fragment length for pair-end data. default: 700"
	echo0 4 "\t-R \t\tset -R to remove duplicate reads via samtools markdup. default: not set, caution: set -R may affect transposon signal calculation"
	echo0 1 "output:"
	echo0 4 "\t-o <dir>\toutput directory. default: ./chipseq_pipeline"
	echo0 4 "\t-p <string\toutput prefix name. if you want to set -p in multiple sample mode, plesae use like -p \"prefix1 prefix2 prefix3\" and keep coordinate with sample_prefix_name in sample information file. default: sample name"
	echo0 6 "other optional:"
	echo0 6 "\t-q qvalue used for macs2 peak calling"
	echo0 6 "\t-i <index>\tbowtie2 index for mapping. default: genome/Bowtie2Index/genome"
	echo0 6 "\t-C <file>\tchrom.size file. default: genome/genome.chrom.size"
	echo0 6 "\t-c <int>\tCPU number used. default: 1"
}

if [ $# -lt 1 ];then
	help_info && exit 1
fi

# parameters
PATH_PROG=`dirname $0` && PATH_ANNO=${PATH_PROG%/bin}/annotation
CPU=1
OUTDIR=./chipseq_pipeline
MAX_FRAGMENT=700
MAP_ENGINE=bowtie2
QVALUE=0.05
BOWTIE2_MODE=--very-sensitive

while getopts "hl:r:g:i:C:ao:p:c:X:PTRM:q:Im:" OPTION; do
	case $OPTION in
		h)	help_info && exit 1;;
		l)	LEFT=(${OPTARG});;
		r)	RIGHT=(${OPTARG});;
		g)	GENOME=${OPTARG};;
		i)	INDEX=`readlink -f ${OPTARG}`;;
		C)	CHROMSIZE=`readlink -f ${OPTARG}`;;
		a)	REPORT="-a";;
		o)	OUTDIR=${OPTARG};;
		p)	PREFIX=${OPTARG};;
		X)	MAX_FRAGMENT=${OPTARG};;
		P)	IF_PIC=1;;
		T)	IF_TE=1;;
		c)	CPU=${OPTARG};;
		R)	IF_RMDUP=1;;
		M)	MAP_ENGINE=${OPTARG};;
		q)	QVALUE=${OPTARG};;
		I)	IF_INPUT=1;;
		m)	BOWTIE2_MODE=${OPTARG};;
		*)	help_info && exit 1
	esac
done

# check parameters
echo0 1 "check parameters......"
[ -z ${LEFT} ] && echo0 0 "please provide left.fastq file via -l" && exit 1
[ -z ${RIGHT} ] && echo0 4 "right file not provide, use signle-end mode"
[ -z ${GENOME} ] && echo0 0 "please provideg genome via -g" && exit 1

for i in ${LEFT[*]}
do
	[ ! -f "${i}" ] && echo0 0 "no file found in ${i}" && exit 1
done

if [ ${#LEFT[*]} -gt 1 ];then # check if -l -r -p are the same length
	[ ! -z ${RIGHT} ] && [ ! ${#RIGHT[*]} -eq ${#LEFT[*]} ] && echo0 0 "Error: Multiple sample mode enabled, but the number of left fastq file is not equal to right fastq file" && exit 1
	[ ! -z ${PREFIX} ] && [ ! ${#PREFIX[*]} -eq ${#LEFT[*]} ] && echo0 0 "Error: Multiple sample mode enabled, but the number of left fastq file is not equal to prefix number" && exit 1
fi

if [ ! -z ${RIGHT} ];then
	for i in ${RIGHT[*]}
	do
		[ ! -f "${i}" ] && echo0 0 "no file found in ${i}" && exit 1
	done
fi

if [ -z ${INDEX} ];then
	if [ "${MAP_ENGINE}" == "bowtie2" ];then
		INDEX=${PATH_ANNO}/${GENOME}/Bowtie2Index/genome
	else
		INDEX=${PATH_ANNO}/${GENOME}/BWAIndex/genome
	fi
fi

[ -z ${CHROMSIZE} ] && CHROMSIZE=${PATH_ANNO}/${GENOME}/${GENOME}.chrom.size
! [ -f ${INDEX}.1.bt2 -o -f ${INDEX}.amb ] && echo0 0 "no index found for ${INDEX}" && exit 1
! [ "${CPU}" -gt 0 ] 2>/dev/null && echo0 0 "threads need to be integer bigger than 0"
! [ "${MAX_FRAGMENT}" -gt 10 ] 2>/dev/null && echo0 0 "max fragment need to be integer bigger than 10"

if [ -z ${PREFIX} ];then
	NUM=0
	if [ -z ${RIGHT} ];then
		for i in ${LEFT[*]}
		do
			PREFIX[$NUM]=`basename ${i%.f*q*}`
			NUM=$(($NUM + 1))
		done
	else
		for i in ${LEFT[*]}
		do
			PREFIX[$NUM]=`basename ${i%[._]1.f*q*}`
			NUM=$(($NUM + 1))
		done
	fi
	echo0 4 "WARNING: no PREFIX name. set "${PREFIX[*]}" as PREFIX name"
fi

! [ "${MAP_ENGINE}" == "bowtie2" -o "${MAP_ENGINE}" == "bwa_mem" -o "${MAP_ENGINE}" == "bwa_aln" ] && echo0 0 "-M must be one of bowtie2, bwa_mem or bwa_aln" && exit 1
echo0 1 "OK"

# check dependencies
echo0 1 "check dependencies......"
checkTools bowtie2
checkTools bwa
checkTools samtools
checkTools fastqc
checkTools bedtools
checkTools bedGraphToBigWig
echo0 1 "OK"

###########
# process #
###########

# mkdir
[ ! -d ${OUTDIR} ] && mkdir -p ${OUTDIR}
[ ! -d ${OUTDIR}/bowtie2 ] && mkdir -p ${OUTDIR}/bowtie2
[ ! -d ${OUTDIR}/log ] && mkdir -p ${OUTDIR}/log
[ ! -d ${OUTDIR}/fastQC ] && mkdir -p ${OUTDIR}/fastQC
[ ! -d ${OUTDIR}/macs2 ] && mkdir -p ${OUTDIR}/macs2
[ ! -d ${OUTDIR}/bigWig ] && mkdir -p ${OUTDIR}/bigWig
[ ! -d ${OUTDIR}/signal ] && mkdir -p ${OUTDIR}/signal


### run mapping and rpm calculation for each sample
SAMPLE_INDEX=0
for TEMP_LEFT in ${LEFT[*]}
do
	# judge if this fastq is already mapped
	if [ -f ${OUTDIR}/bigWig/${PREFIX[${SAMPLE_INDEX}]}.rpm.all.bw ];then
		[ -z ${IF_RMDUP} ] && [ -z ${RIGHT[${SAMPLE_INDEX}]} -o "${RIGHT[${SAMPLE_INDEX}]}" == "none" ] && BAM=${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.sort.bam
		[ ! -z ${IF_RMDUP} ] && [ "${RIGHT[${SAMPLE_INDEX}]}" == "" -o "${RIGHT[${SAMPLE_INDEX}]}" == "none" ] && BAM=${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.rmdup.bam
		[ -z ${IF_RMDUP} ] && [ ! -z ${RIGHT[${SAMPLE_INDEX}]} ] && [ "${RIGHT[${SAMPLE_INDEX}]}" != "none" ] && BAM=${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.sortByName.bam
		[ ! -z ${IF_RMDUP} ] && [ ! -z ${RIGHT[${SAMPLE_INDEX}]} ] && [ "${RIGHT[${SAMPLE_INDEX}]}" != "none" ] && BAM=${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.sortByName.rmdup.bam
		LIST_BAM+=(${BAM}) # add final bam file name to LIST_BAM
		echo0 4 "${PREFIX[${SAMPLE_INDEX}]} already done, skip it"
		SAMPLE_INDEX=$((${SAMPLE_INDEX} + 1))
		continue
	fi
	# fastQC
	echo0 2 "skip fastQC......"
	#fastqc -o ${OUTDIR}/fastQC -f fastq -q -t ${CPU} --noextract ${TEMP_LEFT} ${RIGHT[${SAMPLE_INDEX}]}
	# mapping via bowtie2|bwa mem|bwa aln
	if [ "${MAP_ENGINE}" == "bowtie2" ];then # bowtie2 as engine
		echo0 2 "mapping to genome via bowtie2......"
		if [ -z ${RIGHT[${SAMPLE_INDEX}]} ];then # single-end
			bowtie2 -p ${CPU} ${BOWTIE2_MODE} --no-unal -x ${INDEX} -U ${TEMP_LEFT} -S ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.sam > ${OUTDIR}/log/${PREFIX[${SAMPLE_INDEX}]}.bowtie2.log 2>&1 || (echo0 0 "bowtie2 error, please check ${OUTDIR}/log/${PREFIX[${SAMPLE_INDEX}]}.bowtie2.log" && exit 1)
		else # paired-end
			bowtie2 -p ${CPU} ${BOWTIE2_MODE} --no-unal --no-mixed --no-discordant -I 10 -X ${MAX_FRAGMENT} -x ${INDEX} -1 ${TEMP_LEFT} -2 ${RIGHT[${SAMPLE_INDEX}]} -S ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.sam > ${OUTDIR}/log/${PREFIX[${SAMPLE_INDEX}]}.bowtie2.log 2>&1 || (echo0 0 "bowtie2 error, please check ${OUTDIR}/log/${PREFIX[${SAMPLE_INDEX}]}.bowtie2.log" && exit 1)
		fi
		#NUM_READS=`head -1 ${OUTDIR}/log/${PREFIX[${SAMPLE_INDEX}]}.bowtie2.log` && NUM_READS=${NUM_READS%% *}
		#PERCENT_MAP=`tail -1 ${OUTDIR}/log/${PREFIX[${SAMPLE_INDEX}]}.bowtie2.log` && PERCENT_MAP=${PERCENT_MAP%%\%*}
		#FACTOR=`awk -v nr=${NUM_READS} -v pm=${PERCENT_MAP} 'BEGIN{print nr*pm/100/1000000}'`
	elif [ "${MAP_ENGINE}" == "bwa_mem" ];then # bwa mem as engine
		echo0 2 "mapping to genome via bwa mem......"
		if [ -z ${RIGHT[${SAMPLE_INDEX}]} ];then # single-end
			bwa mem -t ${CPU} ${INDEX} ${TEMP_LEFT} > ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.sam 2>${OUTDIR}/log/${PREFIX[${SAMPLE_INDEX}]}.bwa_mem.log || (echo0 0 "bwa mem error, please check ${OUTDIR}/log/${PREFIX[${SAMPLE_INDEX}]}.bwa_mem.log" && exit 1)
		else # paired-end
			bwa mem -t ${CPU} ${INDEX} ${TEMP_LEFT} ${RIGHT[${SAMPLE_INDEX}]} > ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.sam 2>${OUTDIR}/log/${PREFIX[${SAMPLE_INDEX}]}.bwa_mem.log || (echo0 0 "bwa mem error, please check ${OUTDIR}/log/${PREFIX[${SAMPLE_INDEX}]}.bwa_mem.log" && exit 1)
		fi
	else # bwa aln as engine
		echo0 2 "mapping to genome via bwa aln......"
		if [ -z ${RIGHT[${SAMPLE_INDEX}]} ];then # single-end
			bwa aln -Y -t ${CPU} ${INDEX} ${TEMP_LEFT} -f ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.sai >> ${OUTDIR}/log/${PREFIX[${SAMPLE_INDEX}]}.bwa_aln.log 2>&1 || (echo0 0 "bwa mem error, please check ${OUTDIR}/log/${PREFIX[${SAMPLE_INDEX}]}.bwa_aln.log" && exit 1)
			bwa samse ${INDEX} ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.sai ${TEMP_LEFT} -f ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.sam > ${OUTDIR}/log/${PREFIX[${SAMPLE_INDEX}]}.bwa_samse.log 2>&1 || (echo0 0 "bwa samse error, please check ${OUTDIR}/log/${PREFIX[${SAMPLE_INDEX}]}.bwa_samse.log" && exit 1)
			rm ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.sai 
		else # paired-end
			bwa aln -Y -t ${CPU} ${INDEX} ${TEMP_LEFT} -f ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.1.sai >> ${OUTDIR}/log/${PREFIX[${SAMPLE_INDEX}]}.bwa_aln.log 2>&1 || (echo0 0 "bwa mem error, please check ${OUTDIR}/log/${PREFIX[${SAMPLE_INDEX}]}.bwa_aln.log" && exit 1)
			bwa aln -Y -t ${CPU} ${INDEX} ${RIGHT[${SAMPLE_INDEX}]} -f ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.2.sai >> ${OUTDIR}/log/${PREFIX[${SAMPLE_INDEX}]}.bwa_aln.log 2>&1 || (echo0 0 "bwa mem error, please check ${OUTDIR}/log/${PREFIX[${SAMPLE_INDEX}]}.bwa_aln.log" && exit 1)
			bwa sampe -P ${INDEX} ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.1.sai ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.2.sai ${TEMP_LEFT} ${RIGHT[${SAMPLE_INDEX}]} -f ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.sam > ${OUTDIR}/log/${PREFIX[${SAMPLE_INDEX}]}.bwa_sampe.log 2>&1 || (echo0 0 "bwa sampe error, please check ${OUTDIR}/log/${PREFIX[${SAMPLE_INDEX}]}.bwa_sampe.log" && exit 1)
			rm ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.1.sai ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.2.sai 
		fi
	fi
	# sam to sort.bam
	echo0 2 "sam to sort.bam......"
	samtools view -@ ${CPU} -bhS -o ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.bam ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.sam || (echo0 0 "samtools view error" && exit 1)
	if [ -z ${RIGHT[${SAMPLE_INDEX}]} ];then
		samtools sort -@ ${CPU} -o ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.sort.bam ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.bam || (echo0 0 "samtools sort error" && exit 1)
	else
		samtools sort -n -@ ${CPU} -o ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.sortByName.bam ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.bam || (echo0 0 "samtools sort error" && exit 1)
	fi
	if [ -z ${IF_RMDUP} ];then
		if [ -z ${RIGHT[${SAMPLE_INDEX}]} ];then
			BAM=${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.sort.bam 
		else
			samtools sort -@ ${CPU} -o ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.sort.bam ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.sortByName.bam
			BAM=${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.sortByName.bam 
		fi
		samtools index -@ ${CPU} ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.sort.bam || (echo0 0 "samtools index error" && exit 1) 
	else
		if [ -z ${RIGHT[${SAMPLE_INDEX}]} ];then
			samtools index -@ ${CPU} ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.sort.bam || (echo0 0 "samtools index error" && exit 1) 
			samtools markdup -s -r -@ ${CPU} ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.sort.bam ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.rmdup.bam > ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.rmdup.stats 
			samtools index -@ ${CPU} ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.rmdup.bam || (echo0 0 "samtools index error" && exit 1) 
			BAM=${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.rmdup.bam
		else
			samtools fixmate -@ ${CPU} -m ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.sortByName.bam ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.fixmate.bam 
			samtools sort -@ ${CPU} -o ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.sort.bam ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.fixmate.bam && rm ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.fixmate.bam
			samtools index -@ ${CPU} ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.sort.bam || (echo0 0 "samtools index error" && exit 1) 
			samtools markdup -r -s -@ ${CPU} ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.sort.bam ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.rmdup.bam 2> ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.rmdup.stats 
			samtools index -@ ${CPU} ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.rmdup.bam || (echo0 0 "samtools index error" && exit 1) 
			samtools sort -n -@ ${CPU} -o ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.sortByName.rmdup.bam ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.rmdup.bam 
			BAM=${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.sortByName.rmdup.bam
		fi
	fi
	LIST_BAM+=(${BAM}) # add final bam file name to LIST_BAM
	samtools flagstat ${BAM} > ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.flagstat
	# get roo elements coordinates in dm3
	ROO_COOR=`grep "_roo" /data/tusers/yutianx/tongji2/GitHuB/piSet/annotation/dm3/dm3.rmsk.bed | awk 'BEGIN{FS=OFS="\t"} {printf $1":"$2"-"$3" "}'`
	samtools view -h ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.rmdup.bam $ROO_COOR > ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.rmdup.roo.bam 
	samtools index -@ ${CPU} ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.rmdup.roo.bam 
	samtools view -h ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.sort.bam $ROO_COOR | samtools sort -@ ${CPU} - -o ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.sort.roo.bam 
	samtools index -@ ${CPU} ${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.sort.roo.bam 
	picard MarkDuplicates INPUT=${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.sort.roo.bam OUTPUT=${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.sort.roo.picard.bam METRICS_FILE=${OUTDIR}/bowtie2/${PREFIX[${SAMPLE_INDEX}]}.dup.info REMOVE_DUPLICATES=true ASSUME_SORTED=true
	exit
done









